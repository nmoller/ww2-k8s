
** Please be patient while the chart is being deployed **
{{- if and .Values.ingress.enabled (ne .Values.serviceType "ClusterIP") }}
** Notice : Usually with ingress the serviceType should be set to ClusterIP, which is not the case to this deployment! **
{{- end }}

1. Access you webwork instance with:

{{- if .Values.ingress.enabled }}
  {{ if .Values.ingress.tls }}
    {{- range .Values.ingress.hosts }}
    - https://{{ . }}
    {{- end }}
  {{- else }}
    {{- range .Values.ingress.hosts }}
    - http://{{ . }}
    {{- end }}
  {{- end }}
{{- else if contains "NodePort" .Values.serviceType }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "webwork.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT/

{{- else if contains "LoadBalancer" .Values.serviceType }}

** Please ensure an external IP is associated to the {{ template "webwork.fullname" . }} service before proceeding **
** Watch the status using: kubectl get svc --namespace {{ .Release.Namespace }} -w {{ template "webwork.fullname" . }} **

  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "webwork.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  echo http://$SERVICE_IP/
{{- else if contains "ClusterIP"  .Values.serviceType }}

  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app={{ template "webwork.fullname" . }}" -o jsonpath="{.items[0].metadata.name}")
  echo http://127.0.0.1:8080/
  kubectl port-forward $POD_NAME 8080:80
{{- end }}

2. Login with the following credentials

  echo Username: {{ .Values.webworkUsername }}
  echo Password: $(kubectl get secret --namespace {{ .Release.Namespace }} {{ template "webwork.fullname" . }} -o jsonpath="{.data.webwork-password}" | base64 --decode)
